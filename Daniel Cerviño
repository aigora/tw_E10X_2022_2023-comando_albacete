#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_FILAS 23
#define MAX_COLUMNAS 18

typedef struct {
    int mes;
    int anio;
} Fecha;

typedef struct {
    double cantidad[MAX_FILAS];
} DatosEnergiaColumna;

typedef struct {
    char energia[24];
    DatosEnergiaColumna datos[MAX_COLUMNAS];
    Fecha fecha[MAX_COLUMNAS];
} DatosEnergia;

void imprimirMenu();
void ingresarDatos(DatosEnergia valor_energia[], char filas[MAX_FILAS][10000]);
void mostrarFechasEnergia(DatosEnergia valor_energia[], int num_anio, int num_mes_por_anio);
void realizarCalculos(DatosEnergia valor_energia[], int num_anio, int num_mes_por_anio);

double calcularMedia(DatosEnergiaColumna columna, int num_mes_por_anio);
double encontrarMinimo(DatosEnergiaColumna columna, int num_mes_por_anio);
double encontrarMaximo(DatosEnergiaColumna columna, int num_mes_por_anio);

int main() {
    int i = 0, num_datos = 0, num_anio = 0, m = 0, num_mes_por_anio[15];
    FILE* archivo;
    char fila[10000];
    char filas[MAX_FILAS][10000];
    DatosEnergia valor_energia[15];

    archivo = fopen("generacion.txt", "r");
    if (archivo == NULL) {
        printf("No se ha podido abrir el archivo");
        return 0;
    } else {
        printf("Se ha abierto correctamente\n");
        system("pause");
        system("cls");
    }
    for (i = 0; i < MAX_FILAS; i++){
        fgets(fila, 10000, archivo);
        strcpy(filas[i], fila);
        memset(fila, 0, 10000);
    }

    for ( i = 0; i < strlen(filas[3]); i++){
        if (filas[3][i] == ','){
            num_datos++;
        }
    }

    // Compilar fechas de la fila 4 y guardar en "valor_energia"
    // Aquí debes incluir la lógica para compilar las fechas
    // en la estructura DatosEnergia y almacenarlas en valor_energia

    for ( i = 0; i < 15; i++){
        if (valor_energia[i].fecha[0].anio != 0){
            num_anio++;
        }
    }

    for ( i = 0; i < num_anio; i++){
        for ( int j = 0; j < 12; j++){
            if (valor_energia[i].fecha[j].mes != 0){
                printf("%i/%i\n\n", valor_energia[i].fecha[j].mes, valor_energia[i].fecha[j].anio);
            }
        }
    }

    system("pause");
    system("cls");

    memset(num_mes_por_anio, 0, 15);

    for ( i = 0; i < num_anio; i++){
        for ( int j = 0; j < 12; j++){
            if (valor_energia[i].fecha[j].mes != 0){
                num_mes_por_anio[i] = num_mes_por_anio[i] + 1;
            }
        }
    }

    for ( i = 0; i < 18; i++){
        m = i + 5;
        for ( int j = 0; j < num_anio; j++){
            memset(fila, 0, 10000);
            strcpy(fila, filas[m]);
            // Aquí debes incluir la lógica para leer el título de la columna
            // y almacenar los datos en valor_energia para cada año
        }
        // Aquí debes incluir la lógica para compilar los datos de la columna
        // y almacenarlos en valor_energia para cada año
    }

    int opcion;
    do {
        imprimirMenu();
        printf("Ingrese una opcion: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                ingresarDatos(valor_energia, filas);
                break;
            case 2:
                mostrarFechasEnergia(valor_energia, num_anio, num_mes_por_anio);
                break;
            case 3:
                realizarCalculos(valor_energia, num_anio, num_mes_por_anio);
                break;
            case 4:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opcion invalida. Por favor, ingrese una opcion valida.\n");
        }

        system("pause");
        system("cls");

    } while (opcion != 4);

    return 0;
}

void imprimirMenu() {
    printf("----- MENU -----\n");
    printf("1. Ingresar datos\n");
    printf("2. Mostrar fechas y energia\n");
    printf("3. Realizar calculos de maximo, minimo y media\n");
    printf("4. Salir\n");
}

void ingresarDatos(DatosEnergia valor_energia[], char filas[MAX_FILAS][10000]) {
    // Implementar la lógica para ingresar datos aquí
    printf("Ingrese los datos\n");
    // ...
}

void mostrarFechasEnergia(DatosEnergia valor_energia[], int num_anio, int num_mes_por_anio) {
    // Implementar la lógica para mostrar fechas y energía aquí
    printf("Fechas y energia\n");
    // ...
}

void realizarCalculos(DatosEnergia valor_energia[], int num_anio, int num_mes_por_anio) {
    // Implementar la lógica para realizar los cálculos aquí
    printf("Realizar calculos\n");
    int columna, i;
    double media, minimo, maximo;

    printf("Ingrese el número de columna (0-17): ");
    scanf("%d", &columna);

    if (columna >= 0 && columna < MAX_COLUMNAS) {
        DatosEnergiaColumna columna_datos = valor_energia[0].datos[columna];

        media = calcularMedia(columna_datos, num_mes_por_anio);
        minimo = encontrarMinimo(columna_datos, num_mes_por_anio);
        maximo = encontrarMaximo(columna_datos, num_mes_por_anio);

        printf("Media: %.15f\n", media);
        printf("Valor mínimo: %.15f\n", minimo);
        printf("Valor máximo: %.15f\n", maximo);
    } else {
        printf("Número de columna inválido.\n");
    }
}

double calcularMedia(DatosEnergiaColumna columna, int num_mes_por_anio) {
    double suma = 0.0;
    int i;

    for (i = 0; i < num_mes_por_anio; i++) {
        suma += columna.cantidad[i];
    }

    return suma / num_mes_por_anio;
}

double encontrarMinimo(DatosEnergiaColumna columna, int num_mes_por_anio) {
    double minimo = columna.cantidad[0];
    int i;

    for (i = 1; i < num_mes_por_anio; i++) {
        if (columna.cantidad[i] < minimo) {
            minimo = columna.cantidad[i];
        }
    }

    return minimo;
}

double encontrarMaximo(DatosEnergiaColumna columna, int num_mes_por_anio) {
    double maximo = columna.cantidad[0];
    int i;

    for (i = 1; i < num_mes_por_anio; i++) {
        if (columna.cantidad[i] > maximo) {
            maximo = columna.cantidad[i];
        }
    }

    return maximo;
}
